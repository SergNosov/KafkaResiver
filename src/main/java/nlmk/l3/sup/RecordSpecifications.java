/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nlmk.l3.sup;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RecordSpecifications extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5009827299060469327L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordSpecifications\",\"namespace\":\"nlmk.l3.sup\",\"fields\":[{\"name\":\"specCode\",\"type\":\"int\",\"doc\":\"kod harakteristiki\"},{\"name\":\"specName\",\"type\":\"string\",\"doc\":\"naimenovanie harakteristiki\"},{\"name\":\"specTypeCode\",\"type\":\"int\",\"doc\":\"tip dannyh (1-string, 2-number, 3-date)\"},{\"name\":\"specTypeName\",\"type\":\"string\",\"doc\":\"naimenovanie tipa dannyh\"},{\"name\":\"specValue\",\"type\":[\"null\",\"float\"],\"doc\":\"znacheniye harakteristiki\",\"default\":null},{\"name\":\"specFormat\",\"type\":[\"null\",\"string\"],\"doc\":\"fomat peredachi harakteristiki\",\"default\":null},{\"name\":\"specMeasure\",\"type\":[\"null\",\"string\"],\"doc\":\"edenica izmerenya\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RecordSpecifications> ENCODER =
      new BinaryMessageEncoder<RecordSpecifications>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RecordSpecifications> DECODER =
      new BinaryMessageDecoder<RecordSpecifications>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RecordSpecifications> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RecordSpecifications> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RecordSpecifications> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RecordSpecifications>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RecordSpecifications to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RecordSpecifications from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RecordSpecifications instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RecordSpecifications fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** kod harakteristiki */
   private int specCode;
  /** naimenovanie harakteristiki */
   private java.lang.CharSequence specName;
  /** tip dannyh (1-string, 2-number, 3-date) */
   private int specTypeCode;
  /** naimenovanie tipa dannyh */
   private java.lang.CharSequence specTypeName;
  /** znacheniye harakteristiki */
   private java.lang.Float specValue;
  /** fomat peredachi harakteristiki */
   private java.lang.CharSequence specFormat;
  /** edenica izmerenya */
   private java.lang.CharSequence specMeasure;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RecordSpecifications() {}

  /**
   * All-args constructor.
   * @param specCode kod harakteristiki
   * @param specName naimenovanie harakteristiki
   * @param specTypeCode tip dannyh (1-string, 2-number, 3-date)
   * @param specTypeName naimenovanie tipa dannyh
   * @param specValue znacheniye harakteristiki
   * @param specFormat fomat peredachi harakteristiki
   * @param specMeasure edenica izmerenya
   */
  public RecordSpecifications(java.lang.Integer specCode, java.lang.CharSequence specName, java.lang.Integer specTypeCode, java.lang.CharSequence specTypeName, java.lang.Float specValue, java.lang.CharSequence specFormat, java.lang.CharSequence specMeasure) {
    this.specCode = specCode;
    this.specName = specName;
    this.specTypeCode = specTypeCode;
    this.specTypeName = specTypeName;
    this.specValue = specValue;
    this.specFormat = specFormat;
    this.specMeasure = specMeasure;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return specCode;
    case 1: return specName;
    case 2: return specTypeCode;
    case 3: return specTypeName;
    case 4: return specValue;
    case 5: return specFormat;
    case 6: return specMeasure;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: specCode = (java.lang.Integer)value$; break;
    case 1: specName = (java.lang.CharSequence)value$; break;
    case 2: specTypeCode = (java.lang.Integer)value$; break;
    case 3: specTypeName = (java.lang.CharSequence)value$; break;
    case 4: specValue = (java.lang.Float)value$; break;
    case 5: specFormat = (java.lang.CharSequence)value$; break;
    case 6: specMeasure = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'specCode' field.
   * @return kod harakteristiki
   */
  public int getSpecCode() {
    return specCode;
  }


  /**
   * Sets the value of the 'specCode' field.
   * kod harakteristiki
   * @param value the value to set.
   */
  public void setSpecCode(int value) {
    this.specCode = value;
  }

  /**
   * Gets the value of the 'specName' field.
   * @return naimenovanie harakteristiki
   */
  public java.lang.CharSequence getSpecName() {
    return specName;
  }


  /**
   * Sets the value of the 'specName' field.
   * naimenovanie harakteristiki
   * @param value the value to set.
   */
  public void setSpecName(java.lang.CharSequence value) {
    this.specName = value;
  }

  /**
   * Gets the value of the 'specTypeCode' field.
   * @return tip dannyh (1-string, 2-number, 3-date)
   */
  public int getSpecTypeCode() {
    return specTypeCode;
  }


  /**
   * Sets the value of the 'specTypeCode' field.
   * tip dannyh (1-string, 2-number, 3-date)
   * @param value the value to set.
   */
  public void setSpecTypeCode(int value) {
    this.specTypeCode = value;
  }

  /**
   * Gets the value of the 'specTypeName' field.
   * @return naimenovanie tipa dannyh
   */
  public java.lang.CharSequence getSpecTypeName() {
    return specTypeName;
  }


  /**
   * Sets the value of the 'specTypeName' field.
   * naimenovanie tipa dannyh
   * @param value the value to set.
   */
  public void setSpecTypeName(java.lang.CharSequence value) {
    this.specTypeName = value;
  }

  /**
   * Gets the value of the 'specValue' field.
   * @return znacheniye harakteristiki
   */
  public java.lang.Float getSpecValue() {
    return specValue;
  }


  /**
   * Sets the value of the 'specValue' field.
   * znacheniye harakteristiki
   * @param value the value to set.
   */
  public void setSpecValue(java.lang.Float value) {
    this.specValue = value;
  }

  /**
   * Gets the value of the 'specFormat' field.
   * @return fomat peredachi harakteristiki
   */
  public java.lang.CharSequence getSpecFormat() {
    return specFormat;
  }


  /**
   * Sets the value of the 'specFormat' field.
   * fomat peredachi harakteristiki
   * @param value the value to set.
   */
  public void setSpecFormat(java.lang.CharSequence value) {
    this.specFormat = value;
  }

  /**
   * Gets the value of the 'specMeasure' field.
   * @return edenica izmerenya
   */
  public java.lang.CharSequence getSpecMeasure() {
    return specMeasure;
  }


  /**
   * Sets the value of the 'specMeasure' field.
   * edenica izmerenya
   * @param value the value to set.
   */
  public void setSpecMeasure(java.lang.CharSequence value) {
    this.specMeasure = value;
  }

  /**
   * Creates a new RecordSpecifications RecordBuilder.
   * @return A new RecordSpecifications RecordBuilder
   */
  public static nlmk.l3.sup.RecordSpecifications.Builder newBuilder() {
    return new nlmk.l3.sup.RecordSpecifications.Builder();
  }

  /**
   * Creates a new RecordSpecifications RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RecordSpecifications RecordBuilder
   */
  public static nlmk.l3.sup.RecordSpecifications.Builder newBuilder(nlmk.l3.sup.RecordSpecifications.Builder other) {
    if (other == null) {
      return new nlmk.l3.sup.RecordSpecifications.Builder();
    } else {
      return new nlmk.l3.sup.RecordSpecifications.Builder(other);
    }
  }

  /**
   * Creates a new RecordSpecifications RecordBuilder by copying an existing RecordSpecifications instance.
   * @param other The existing instance to copy.
   * @return A new RecordSpecifications RecordBuilder
   */
  public static nlmk.l3.sup.RecordSpecifications.Builder newBuilder(nlmk.l3.sup.RecordSpecifications other) {
    if (other == null) {
      return new nlmk.l3.sup.RecordSpecifications.Builder();
    } else {
      return new nlmk.l3.sup.RecordSpecifications.Builder(other);
    }
  }

  /**
   * RecordBuilder for RecordSpecifications instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordSpecifications>
    implements org.apache.avro.data.RecordBuilder<RecordSpecifications> {

    /** kod harakteristiki */
    private int specCode;
    /** naimenovanie harakteristiki */
    private java.lang.CharSequence specName;
    /** tip dannyh (1-string, 2-number, 3-date) */
    private int specTypeCode;
    /** naimenovanie tipa dannyh */
    private java.lang.CharSequence specTypeName;
    /** znacheniye harakteristiki */
    private java.lang.Float specValue;
    /** fomat peredachi harakteristiki */
    private java.lang.CharSequence specFormat;
    /** edenica izmerenya */
    private java.lang.CharSequence specMeasure;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nlmk.l3.sup.RecordSpecifications.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.specCode)) {
        this.specCode = data().deepCopy(fields()[0].schema(), other.specCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.specName)) {
        this.specName = data().deepCopy(fields()[1].schema(), other.specName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.specTypeCode)) {
        this.specTypeCode = data().deepCopy(fields()[2].schema(), other.specTypeCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.specTypeName)) {
        this.specTypeName = data().deepCopy(fields()[3].schema(), other.specTypeName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.specValue)) {
        this.specValue = data().deepCopy(fields()[4].schema(), other.specValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.specFormat)) {
        this.specFormat = data().deepCopy(fields()[5].schema(), other.specFormat);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.specMeasure)) {
        this.specMeasure = data().deepCopy(fields()[6].schema(), other.specMeasure);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing RecordSpecifications instance
     * @param other The existing instance to copy.
     */
    private Builder(nlmk.l3.sup.RecordSpecifications other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.specCode)) {
        this.specCode = data().deepCopy(fields()[0].schema(), other.specCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.specName)) {
        this.specName = data().deepCopy(fields()[1].schema(), other.specName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.specTypeCode)) {
        this.specTypeCode = data().deepCopy(fields()[2].schema(), other.specTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.specTypeName)) {
        this.specTypeName = data().deepCopy(fields()[3].schema(), other.specTypeName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.specValue)) {
        this.specValue = data().deepCopy(fields()[4].schema(), other.specValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.specFormat)) {
        this.specFormat = data().deepCopy(fields()[5].schema(), other.specFormat);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.specMeasure)) {
        this.specMeasure = data().deepCopy(fields()[6].schema(), other.specMeasure);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'specCode' field.
      * kod harakteristiki
      * @return The value.
      */
    public int getSpecCode() {
      return specCode;
    }


    /**
      * Sets the value of the 'specCode' field.
      * kod harakteristiki
      * @param value The value of 'specCode'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecCode(int value) {
      validate(fields()[0], value);
      this.specCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'specCode' field has been set.
      * kod harakteristiki
      * @return True if the 'specCode' field has been set, false otherwise.
      */
    public boolean hasSpecCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'specCode' field.
      * kod harakteristiki
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecCode() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'specName' field.
      * naimenovanie harakteristiki
      * @return The value.
      */
    public java.lang.CharSequence getSpecName() {
      return specName;
    }


    /**
      * Sets the value of the 'specName' field.
      * naimenovanie harakteristiki
      * @param value The value of 'specName'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.specName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'specName' field has been set.
      * naimenovanie harakteristiki
      * @return True if the 'specName' field has been set, false otherwise.
      */
    public boolean hasSpecName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'specName' field.
      * naimenovanie harakteristiki
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecName() {
      specName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'specTypeCode' field.
      * tip dannyh (1-string, 2-number, 3-date)
      * @return The value.
      */
    public int getSpecTypeCode() {
      return specTypeCode;
    }


    /**
      * Sets the value of the 'specTypeCode' field.
      * tip dannyh (1-string, 2-number, 3-date)
      * @param value The value of 'specTypeCode'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecTypeCode(int value) {
      validate(fields()[2], value);
      this.specTypeCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'specTypeCode' field has been set.
      * tip dannyh (1-string, 2-number, 3-date)
      * @return True if the 'specTypeCode' field has been set, false otherwise.
      */
    public boolean hasSpecTypeCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'specTypeCode' field.
      * tip dannyh (1-string, 2-number, 3-date)
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecTypeCode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'specTypeName' field.
      * naimenovanie tipa dannyh
      * @return The value.
      */
    public java.lang.CharSequence getSpecTypeName() {
      return specTypeName;
    }


    /**
      * Sets the value of the 'specTypeName' field.
      * naimenovanie tipa dannyh
      * @param value The value of 'specTypeName'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecTypeName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.specTypeName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'specTypeName' field has been set.
      * naimenovanie tipa dannyh
      * @return True if the 'specTypeName' field has been set, false otherwise.
      */
    public boolean hasSpecTypeName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'specTypeName' field.
      * naimenovanie tipa dannyh
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecTypeName() {
      specTypeName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'specValue' field.
      * znacheniye harakteristiki
      * @return The value.
      */
    public java.lang.Float getSpecValue() {
      return specValue;
    }


    /**
      * Sets the value of the 'specValue' field.
      * znacheniye harakteristiki
      * @param value The value of 'specValue'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecValue(java.lang.Float value) {
      validate(fields()[4], value);
      this.specValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'specValue' field has been set.
      * znacheniye harakteristiki
      * @return True if the 'specValue' field has been set, false otherwise.
      */
    public boolean hasSpecValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'specValue' field.
      * znacheniye harakteristiki
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecValue() {
      specValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'specFormat' field.
      * fomat peredachi harakteristiki
      * @return The value.
      */
    public java.lang.CharSequence getSpecFormat() {
      return specFormat;
    }


    /**
      * Sets the value of the 'specFormat' field.
      * fomat peredachi harakteristiki
      * @param value The value of 'specFormat'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecFormat(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.specFormat = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'specFormat' field has been set.
      * fomat peredachi harakteristiki
      * @return True if the 'specFormat' field has been set, false otherwise.
      */
    public boolean hasSpecFormat() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'specFormat' field.
      * fomat peredachi harakteristiki
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecFormat() {
      specFormat = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'specMeasure' field.
      * edenica izmerenya
      * @return The value.
      */
    public java.lang.CharSequence getSpecMeasure() {
      return specMeasure;
    }


    /**
      * Sets the value of the 'specMeasure' field.
      * edenica izmerenya
      * @param value The value of 'specMeasure'.
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder setSpecMeasure(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.specMeasure = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'specMeasure' field has been set.
      * edenica izmerenya
      * @return True if the 'specMeasure' field has been set, false otherwise.
      */
    public boolean hasSpecMeasure() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'specMeasure' field.
      * edenica izmerenya
      * @return This builder.
      */
    public nlmk.l3.sup.RecordSpecifications.Builder clearSpecMeasure() {
      specMeasure = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RecordSpecifications build() {
      try {
        RecordSpecifications record = new RecordSpecifications();
        record.specCode = fieldSetFlags()[0] ? this.specCode : (java.lang.Integer) defaultValue(fields()[0]);
        record.specName = fieldSetFlags()[1] ? this.specName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.specTypeCode = fieldSetFlags()[2] ? this.specTypeCode : (java.lang.Integer) defaultValue(fields()[2]);
        record.specTypeName = fieldSetFlags()[3] ? this.specTypeName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.specValue = fieldSetFlags()[4] ? this.specValue : (java.lang.Float) defaultValue(fields()[4]);
        record.specFormat = fieldSetFlags()[5] ? this.specFormat : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.specMeasure = fieldSetFlags()[6] ? this.specMeasure : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RecordSpecifications>
    WRITER$ = (org.apache.avro.io.DatumWriter<RecordSpecifications>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RecordSpecifications>
    READER$ = (org.apache.avro.io.DatumReader<RecordSpecifications>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.specCode);

    out.writeString(this.specName);

    out.writeInt(this.specTypeCode);

    out.writeString(this.specTypeName);

    if (this.specValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.specValue);
    }

    if (this.specFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.specFormat);
    }

    if (this.specMeasure == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.specMeasure);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.specCode = in.readInt();

      this.specName = in.readString(this.specName instanceof Utf8 ? (Utf8)this.specName : null);

      this.specTypeCode = in.readInt();

      this.specTypeName = in.readString(this.specTypeName instanceof Utf8 ? (Utf8)this.specTypeName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.specValue = null;
      } else {
        this.specValue = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.specFormat = null;
      } else {
        this.specFormat = in.readString(this.specFormat instanceof Utf8 ? (Utf8)this.specFormat : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.specMeasure = null;
      } else {
        this.specMeasure = in.readString(this.specMeasure instanceof Utf8 ? (Utf8)this.specMeasure : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.specCode = in.readInt();
          break;

        case 1:
          this.specName = in.readString(this.specName instanceof Utf8 ? (Utf8)this.specName : null);
          break;

        case 2:
          this.specTypeCode = in.readInt();
          break;

        case 3:
          this.specTypeName = in.readString(this.specTypeName instanceof Utf8 ? (Utf8)this.specTypeName : null);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.specValue = null;
          } else {
            this.specValue = in.readFloat();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.specFormat = null;
          } else {
            this.specFormat = in.readString(this.specFormat instanceof Utf8 ? (Utf8)this.specFormat : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.specMeasure = null;
          } else {
            this.specMeasure = in.readString(this.specMeasure instanceof Utf8 ? (Utf8)this.specMeasure : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










